DONE 1. ObjectId.write() should be untagged contrary to Value.write() which is tagged!

DONE -> ObjectId.write() and ObjectId.writeTagged()
DONE -> Value.write() and Value.writeUntagged()

DONE 2. Use objectIdManager as late as possible (in the whole Event facility for instance) - it will speed up everything
DONE  -> we don't need objectId for an object we're not sure we will send across JDWP (like when creating FieldModificationEvent)
  
DONE 3. Change sysouts to standard logging
IN PROGRESS 4. Complete the possible errors - implement the rest of the Exceptions
IN PROGRESS 5. Doplnovat javadoc
IN PROGRESS 6. Napsat testy - unit i integracni
7. Vyhodit enumy do solo trid - uz jsou moc rozrostly
8. Mozna predelat enumy na nejaky standartnejsi command pattern (skonzultovat s profikama)
9. U stepovani udelat podrobny rozbor (javadoc), jestli je implementace dostacuji a korektni (napriklad chovani u F5 vs F6 v Eclipse atd...)
IN PROGRESS 10. Odbouravat TODOs
DONE 11. Solve ObjectId#get() == null everywhere !!!
DONE 12. With one thread processing all the requests, the VM might become unresponsive if it gets stuck in a command (it's not even possible to call virtualmachinecommand#exit)
DONE 13. Need to finally decide whether nulls are allowed for Identifier instances - for ObjectIds we always get NullObjectId but this doesn't work for any Identifier (like in ExceptionOnlyFilter (see TODO there) for ReferenceTypeId) - it works for instance in FieldModificationEvent with objectBeingModified which as ObjectId is NullObjectId if it is for statics.

DONE 14. Nektere event requesty nejsou vubec v mape - napriklad METHOD_EXIT_WITH_RETURN_VALUE


DONE x.1 Nektere commandy vyzaduji zastavenou VM - *withGenerics - implementovat
DONE x.2 Nepouzivat Fields - v interface by melo byt ElementInfo a field index (namisto Fields)
NO x.4 dodelat popframes
NOT YET x.3 Mozna pouzivat JPF Logger
DONE x.4 Spousteni jdwp pres jpf propertu
DONE x.5 NullObjectId mit v mape - nepouzivat null tam kde je ObjectId
DONE x.6 use getModifiable - pro ElementInfo i pro StackFrame
DONE x.7 u modifikace - vyresit paralelismus (synchronizace)

DONE x.2.question Co s StackFrame - kdyz tam neco menim - narozdil od ElementInfo nemam modifiable instance - StackFrame.checkIsModifiable() metoda se nikde nepouziva - je to implementovany v JPF?

DONE 15. Cleanup exception structure - use the same name convention everywhere

DONE 16. zkontrolovat, ze vsechny commandy ke vsem enablovanym capabilities jsou implementovany

=======================================
Mame v JPF Class status viz JVMTI http://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#GetClassStatus. Pokud ano, tak je to potreba doimplementovat (ClassStatus).
DONE Najit vsechny NotImplementedException!
Vyhodit vsechny enumy ven!
Count the thread suspension - VirtualMachine#STOP, VirtualMachine#RESUME
Zaridit moznost cteni major a minor verse - ReferenceType#CLASSFILEVERSION
zrusit visitor patterny u filteru a udelat to stejne jednoduse jako je to u FieldOnlyFilter resp FieldOnlyFilterable
napsat test na Virtualmachinecommand CREATESTRING