package gov.nasa.jpf.jdwp.event;

import java.io.DataOutputStream;
import java.io.IOException;

import gov.nasa.jpf.jdwp.command.VirtualMachineCommand;
import gov.nasa.jpf.jdwp.id.JdwpObjectManager;
import gov.nasa.jpf.jdwp.id.object.ThreadId;
import gov.nasa.jpf.vm.ThreadInfo;

/**
 * <p>
 * <h2>JDWP Specification</h2>
 * Notification of a new running thread in the target VM. The new thread can be
 * the result of a call to {@link java.lang.Thread#start()} or the result of
 * attaching a new thread to the VM though JNI. The notification is generated by
 * the new thread some time before its execution starts. Because of this timing,
 * it is possible to receive other events for the thread before this event is
 * received. (Notably, Method Entry Events and Method Exit Events might occur
 * during thread initialization. It is also possible for the
 * {@link VirtualMachineCommand#ALLTHREADS} command to return a thread before
 * its thread start event is received.
 * </p>
 * <p>
 * Note that this event gives no information about the creation of the thread
 * object which may have happened much earlier, depending on the VM being
 * debugged.
 * </p>
 * 
 * @author stepan
 * 
 */
public class ThreadStartEvent extends EventBase implements Threadable {

	/**
	 * Creates Thread Start event.
	 * 
	 * @param thread
	 *            Started thread
	 */
	public ThreadStartEvent(ThreadInfo thread) {
		super(EventKind.THREAD_START, (ThreadId) JdwpObjectManager.getInstance().getThreadId(thread));
	}

	@Override
	protected void writeSpecific(DataOutputStream os) throws IOException {
	}

}
