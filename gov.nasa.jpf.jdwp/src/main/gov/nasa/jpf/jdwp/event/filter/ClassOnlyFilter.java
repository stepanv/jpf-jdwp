/* 
   Copyright (C) 2013 Stepan Vavra

This file is part of (Java Debug Wire Protocol) JDWP for 
Java PathFinder (JPF) project.

JDWP for JPF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

JDWP for JPF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 
 */

package gov.nasa.jpf.jdwp.event.filter;

import gov.nasa.jpf.jdwp.event.ClassOnlyFilterable;
import gov.nasa.jpf.jdwp.event.ClassPrepareEvent;
import gov.nasa.jpf.jdwp.event.Locatable;
import gov.nasa.jpf.jdwp.exception.InvalidIdentifier;
import gov.nasa.jpf.jdwp.id.type.ReferenceTypeId;
import gov.nasa.jpf.vm.ClassInfo;

/**
 * <p>
 * Can be used with {@link ClassOnlyFilterable} events.
 * </p>
 * <p>
 * <h2>JDWP Specification</h2>
 * For class prepare events, restricts the events generated by this request to
 * be the preparation of the given reference type and any subtypes.<br/>
 * For other events, restricts the events generated by this request to those
 * whose location is in the given reference type or any of its subtypes. An
 * event will be generated for any location in a reference type that can be
 * safely cast to the given reference type.<br/>
 * This modifier can be used with any event kind except class unload, thread
 * start, and thread end.
 * </p>
 * 
 * @see Locatable
 * @see ClassPrepareEvent
 * 
 * @author stepan
 * 
 */
public class ClassOnlyFilter extends Filter<ClassOnlyFilterable> {

  private ReferenceTypeId referenceTypeId;

  /**
   * Creates Class Only filter.
   * 
   * @param clazz
   *          Required class
   */
  public ClassOnlyFilter(ReferenceTypeId clazz) {
    super(ModKind.CLASS_ONLY, ClassOnlyFilterable.class);
    this.referenceTypeId = clazz;
  }

  @Override
  public boolean matches(ClassOnlyFilterable event) throws InvalidIdentifier {
    return event.matches(this);
  }

  public boolean matches(ClassInfo referenceType) throws InvalidIdentifier {
    return referenceType.isInstanceOf(referenceTypeId.get());
  }

}
